/*
 * Copyright 2024 Viamrobotics. GNU AGPL.
 * Generated by cbingen. Do not edit directly.
 *
 */

#ifndef VIAM_MICRORDK_H
#define VIAM_MICRORDK_H

#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

typedef enum viam_code {
  VIAM_OK,
  VIAM_KEY_NOT_FOUND,
  VIAM_HAS_PANIC,
  VIAM_INVALID_ARG,
  VIAM_REGISTRY_ERROR,
} viam_code;

typedef struct config_context config_context;

typedef struct generic_c_sensor_config generic_c_sensor_config;

typedef struct get_readings_context get_readings_context;

/*
 An helper type which stores key value pairs where key is a Cstring and value
 */
typedef struct hashmap_cstring_ptr hashmap_cstring_ptr;

typedef struct raw_attributes raw_attributes;

typedef struct viam_server_context viam_server_context;

/*
 Callback passed to `hashmap_cstring_ptr_destroy`
 */
typedef void (*hashmap_cstring_ptr_destroy_callback)(void*, const char*, const void*);

/*
 Callback passed to `hashmap_cstring_ptr_for_each_kv`
 */
typedef void (*hashmap_cstring_ptr_callback)(void*, const char*, const void*);

/*
 Callback passed to `hashmap_cstring_ptr_retain`
 */
typedef bool (*hashmap_cstring_ptr_retain_callback)(void*, const char*, const void*);

typedef int (*config_callback)(struct config_context*, void*, void**);

typedef int (*get_readings_callback)(struct get_readings_context*, void*);

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/*
 Get a string from the attribute section of a sensor configuration
 */
enum viam_code config_get_string(struct config_context *ctx, const char *key, char **out);

/*
 Returns a pointer to the raw attribute structure of a component config
 */
struct raw_attributes *config_get_raw_attributes(struct config_context *ctx);

/*
 Free a raw_attributes structure previously obtained with `config_get_raw_attributes`
 */
enum viam_code config_raw_attributes_free(struct raw_attributes *attrs);

/*
 Free a string allocated by a successful call to `config_get_string`
 */
enum viam_code config_free_string(struct config_context*, char *ptr);

/*
 Get an int32 from the attribute section of a sensor configuration
 */
enum viam_code config_get_i32(struct config_context *ctx, const char *key, int *out);

/*
 Get a vector of int32s from the attribute section of a sensor configuration,
 */
enum viam_code config_get_i32_vec(struct config_context *ctx, const char *key, int32_t *out);

/*
 Get the length of a vector of int32s from the attribute section of a sensor configuration.
 */
enum viam_code config_get_i32_vec_len(struct config_context *ctx, const char *key, int32_t *out);

/*
 Creates an new `hashmap_ctsring_ptr`
 */
struct hashmap_cstring_ptr *hashmap_cstring_ptr_new(void);

/*
 Destroys an  `hashmap_cstring_ptr`
 */
enum viam_code hashmap_cstring_ptr_destroy(struct hashmap_cstring_ptr *ctx,
                                           void *user_data,
                                           hashmap_cstring_ptr_destroy_callback callback);

/*
 Returns a previously stored value if it exists, otherwise returns a null pointer
 */
const void *hashmap_cstring_ptr_get(struct hashmap_cstring_ptr *ctx, const char *key);

/*
 Iterate through each key value pair calling callback on each pairs
 */
void hashmap_cstring_ptr_for_each_kv(struct hashmap_cstring_ptr *ctx,
                                     void *user_data,
                                     hashmap_cstring_ptr_callback callback);

/*
 Removes and returns a previously stored value if it exists, otherwise returns a null pointer
 */
const void *hashmap_cstring_ptr_remove(struct hashmap_cstring_ptr *ctx, const char *key);

/*
 Inserts a key-value pair into the hash map.
 */
const void *hashmap_cstring_ptr_insert(struct hashmap_cstring_ptr *ctx,
                                       const char *key,
                                       const void *ptr);

/*
 Removes all key value pairs for which the callback returns false.
 */
enum viam_code hashmap_cstring_ptr_retain(struct hashmap_cstring_ptr *ctx,
                                          void *user_data,
                                          hashmap_cstring_ptr_retain_callback callback);

/*
 Creates a new Viam server context
 */
struct viam_server_context *init_viam_server_context(void);

/*
 Sets the provisioning model
 */
enum viam_code viam_server_set_provisioning_model(struct viam_server_context *ctx,
                                                  const char *model);

/*
 Sets the provisioning manufacturer
 */
enum viam_code viam_server_set_provisioning_manufacturer(struct viam_server_context *ctx,
                                                         const char *manufacturer);

/*
 Sets the provisioning fragment id
 */
enum viam_code viam_server_set_provisioning_fragment(struct viam_server_context *ctx,
                                                     const char *fragment_id);

/*
 Register a generic sensor in the Registry making configurable via Viam config
 */
enum viam_code viam_server_register_c_generic_sensor(struct viam_server_context *ctx,
                                                     const char *model,
                                                     struct generic_c_sensor_config *sensor);

/*
 Starts the viam server, the function will take ownership of `ctx` therefore future call
 */
enum viam_code viam_server_start(struct viam_server_context *ctx);

/*
 Creates an new generic sensor config to be used for registering a generic C sensor with the Robot's registry
 */
struct generic_c_sensor_config *generic_c_sensor_config_new(void);

/*
 Set the user data pointer, the value will then be passed to the `config_callback` during the configuration step
 */
enum viam_code generic_c_sensor_config_set_user_data(struct generic_c_sensor_config *ctx,
                                                     void *data);

/*
 Set the config callback, which will be called when this sensor is configured
 */
enum viam_code generic_c_sensor_config_set_config_callback(struct generic_c_sensor_config *ctx,
                                                           config_callback cb);

/*
 Set the get readings callback, which will be called when GetReadings is called on a properly
 */
enum viam_code generic_c_sensor_config_set_readings_callback(struct generic_c_sensor_config *ctx,
                                                             get_readings_callback cb);

/*
 This function can be use by a sensor during the call to `get_readings_callback` to add binary data to a response
 */
enum viam_code get_readings_add_binary_blob(struct get_readings_context *ctx,
                                            const char *key,
                                            const unsigned char *array,
                                            unsigned int len);

/*
 This function can be use by a sensor during the call to `get_readings_callback` to add a string to a response
 */
enum viam_code get_readings_add_string(struct get_readings_context *ctx,
                                       const char *key,
                                       const char *value);

/*
 This function can be use by a sensor during the call to `get_readings_callback` to add a `raw_attributes` struct
 */
enum viam_code get_readings_add_raw_attributes(struct get_readings_context *ctx,
                                               const struct raw_attributes *raw_attrs);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* VIAM_MICRORDK_H */
